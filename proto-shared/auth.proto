syntax = "proto3";

package auth;



import "google/api/annotations.proto";

import "google/protobuf/timestamp.proto";


option go_package = "e-commerce-microservice/proto-shared/gen/pb";


// Message untuk user
message AuthUser {
  string username = 1;
  string full_name = 2;
  string role = 3;
  string email = 4;
  bool is_verified = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

// ===== Register =====
message RegisterRequest {
  string username = 1;
  string full_name = 2;
  string email = 3;
  string password = 4; 
 

}

message RegisterResponse {
  AuthUser user = 1;
  string access_token = 2;
  string refresh_token = 3;
}

// ===== Login by Email/Password =====
message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  AuthUser user = 1;
  string access_token = 2;
  string refresh_token = 3;
}

// ===== Login by Google OAuth2 =====
message GoogleLoginRequest {
  string id_token = 1; // dari Google OAuth2 frontend
}

message GoogleLoginResponse {
  AuthUser user = 1;
  string access_token = 2;
  string refresh_token = 3;
}

// ===== Refresh Token =====
message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string access_token = 1;
  string refresh_token = 2;
}

// ===== Verify Email =====
message VerifyEmailRequest {
  string email = 1;
}

message VerifyEmailResponse {
  string message = 1;
}

message ConfirmEmailRequest {
  string email = 1;
  string secret_code = 2;
}

message ConfirmEmailResponse {
  string message = 1;
}

// ===== AuthService definition =====
service AuthService {
  rpc Register(RegisterRequest) returns (RegisterResponse){
     option (google.api.http) = {
           post: "/v1/auth/register"
           body: "*"
         };
  }
  rpc Login(LoginRequest) returns (LoginResponse){
     option (google.api.http) = {
           post: "/v1/auth/login"
           body: "*"
         };
  }
  rpc GoogleLogin(GoogleLoginRequest) returns (GoogleLoginResponse){
     option (google.api.http) = {
           post: "/v1/auth/google_login"
           body: "*"
         };
  }
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse){
    option (google.api.http) = {
           post: "/v1/auth/refresh_token"
           body: "*"
         };
  }
  rpc SendVerificationEmail(VerifyEmailRequest) returns (VerifyEmailResponse){
     option (google.api.http) = {
           post: "/v1/auth/send_verification"
           body: "*"
         };
  }
  rpc ConfirmEmail(ConfirmEmailRequest) returns (ConfirmEmailResponse){
     option (google.api.http) = {
           post: "/v1/auth/confirm_email"
           body: "*"
         };
  }
}
