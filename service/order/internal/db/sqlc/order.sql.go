// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
 id,
 username,
 car_id,
 status,
 amount
) VALUES (
  $1, $2 ,$3, $4, $5
)
RETURNING id, username, car_id, status, created_at, updated_at, amount
`

type CreateOrderParams struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	CarID    uuid.UUID `json:"car_id"`
	Status   string    `json:"status"`
	Amount   float64   `json:"amount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.Username,
		arg.CarID,
		arg.Status,
		arg.Amount,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CarID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Amount,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, username, car_id, status, created_at, updated_at, amount FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CarID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Amount,
	)
	return i, err
}

const listOrder = `-- name: ListOrder :many
SELECT id, username, car_id, status, created_at, updated_at, amount FROM orders
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrderParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrder(ctx context.Context, arg ListOrderParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrder, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.CarID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET 
  status = COALESCE($1,status)
WHERE id = $2
RETURNING id, username, car_id, status, created_at, updated_at, amount
`

type UpdateOrderParams struct {
	Status pgtype.Text `json:"status"`
	ID     uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder, arg.Status, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CarID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Amount,
	)
	return i, err
}
