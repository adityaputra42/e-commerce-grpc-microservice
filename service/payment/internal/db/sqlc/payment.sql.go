// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
  id,
  order_id,
  user_id,
  network,
  currency,
  amount,
  wallet_address,
  tx_hash,
  status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, order_id, user_id, network, currency, amount, wallet_address, tx_hash, status, created_at, updated_at
`

type CreatePaymentParams struct {
	ID            uuid.UUID      `json:"id"`
	OrderID       uuid.UUID      `json:"order_id"`
	UserID        uuid.UUID      `json:"user_id"`
	Network       string         `json:"network"`
	Currency      string         `json:"currency"`
	Amount        pgtype.Numeric `json:"amount"`
	WalletAddress string         `json:"wallet_address"`
	TxHash        pgtype.Text    `json:"tx_hash"`
	Status        string         `json:"status"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.ID,
		arg.OrderID,
		arg.UserID,
		arg.Network,
		arg.Currency,
		arg.Amount,
		arg.WalletAddress,
		arg.TxHash,
		arg.Status,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Network,
		&i.Currency,
		&i.Amount,
		&i.WalletAddress,
		&i.TxHash,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPayment = `-- name: GetPayment :one
SELECT id, order_id, user_id, network, currency, amount, wallet_address, tx_hash, status, created_at, updated_at FROM payments
WHERE id = $1
`

func (q *Queries) GetPayment(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Network,
		&i.Currency,
		&i.Amount,
		&i.WalletAddress,
		&i.TxHash,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByTxHash = `-- name: GetPaymentByTxHash :one
SELECT id, order_id, user_id, network, currency, amount, wallet_address, tx_hash, status, created_at, updated_at FROM payments
WHERE tx_hash = $1
`

func (q *Queries) GetPaymentByTxHash(ctx context.Context, txHash pgtype.Text) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByTxHash, txHash)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Network,
		&i.Currency,
		&i.Amount,
		&i.WalletAddress,
		&i.TxHash,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPaymentsByUser = `-- name: ListPaymentsByUser :many
SELECT id, order_id, user_id, network, currency, amount, wallet_address, tx_hash, status, created_at, updated_at FROM payments
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPaymentsByUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListPaymentsByUser(ctx context.Context, arg ListPaymentsByUserParams) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPaymentsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.UserID,
			&i.Network,
			&i.Currency,
			&i.Amount,
			&i.WalletAddress,
			&i.TxHash,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payments
SET status = $2,
    tx_hash = COALESCE($3, tx_hash),
    updated_at = now()
WHERE id = $1
RETURNING id, order_id, user_id, network, currency, amount, wallet_address, tx_hash, status, created_at, updated_at
`

type UpdatePaymentStatusParams struct {
	ID     uuid.UUID   `json:"id"`
	Status string      `json:"status"`
	TxHash pgtype.Text `json:"tx_hash"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePaymentStatus, arg.ID, arg.Status, arg.TxHash)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Network,
		&i.Currency,
		&i.Amount,
		&i.WalletAddress,
		&i.TxHash,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
