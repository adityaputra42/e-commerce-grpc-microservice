// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment_wallet.sql

package db

import (
	"context"
)

const createPaymentWallet = `-- name: CreatePaymentWallet :one
INSERT INTO payment_wallets (
  network,
  wallet_address
) VALUES (
  $1, $2
)
RETURNING id, network, wallet_address, created_at
`

type CreatePaymentWalletParams struct {
	Network       string `json:"network"`
	WalletAddress string `json:"wallet_address"`
}

func (q *Queries) CreatePaymentWallet(ctx context.Context, arg CreatePaymentWalletParams) (PaymentWallet, error) {
	row := q.db.QueryRow(ctx, createPaymentWallet, arg.Network, arg.WalletAddress)
	var i PaymentWallet
	err := row.Scan(
		&i.ID,
		&i.Network,
		&i.WalletAddress,
		&i.CreatedAt,
	)
	return i, err
}

const deletePaymentWallet = `-- name: DeletePaymentWallet :exec
DELETE FROM payment_wallets
WHERE network = $1
`

func (q *Queries) DeletePaymentWallet(ctx context.Context, network string) error {
	_, err := q.db.Exec(ctx, deletePaymentWallet, network)
	return err
}

const getWalletAddressByNetwork = `-- name: GetWalletAddressByNetwork :one
SELECT id, network, wallet_address, created_at FROM payment_wallets
WHERE network = $1
LIMIT 1
`

func (q *Queries) GetWalletAddressByNetwork(ctx context.Context, network string) (PaymentWallet, error) {
	row := q.db.QueryRow(ctx, getWalletAddressByNetwork, network)
	var i PaymentWallet
	err := row.Scan(
		&i.ID,
		&i.Network,
		&i.WalletAddress,
		&i.CreatedAt,
	)
	return i, err
}

const listPaymentWallets = `-- name: ListPaymentWallets :many
SELECT id, network, wallet_address, created_at FROM payment_wallets
ORDER BY network
`

func (q *Queries) ListPaymentWallets(ctx context.Context) ([]PaymentWallet, error) {
	rows, err := q.db.Query(ctx, listPaymentWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentWallet{}
	for rows.Next() {
		var i PaymentWallet
		if err := rows.Scan(
			&i.ID,
			&i.Network,
			&i.WalletAddress,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentWallet = `-- name: UpdatePaymentWallet :one
UPDATE payment_wallets
SET wallet_address = $2
WHERE network = $1
RETURNING id, network, wallet_address, created_at
`

type UpdatePaymentWalletParams struct {
	Network       string `json:"network"`
	WalletAddress string `json:"wallet_address"`
}

func (q *Queries) UpdatePaymentWallet(ctx context.Context, arg UpdatePaymentWalletParams) (PaymentWallet, error) {
	row := q.db.QueryRow(ctx, updatePaymentWallet, arg.Network, arg.WalletAddress)
	var i PaymentWallet
	err := row.Scan(
		&i.ID,
		&i.Network,
		&i.WalletAddress,
		&i.CreatedAt,
	)
	return i, err
}
