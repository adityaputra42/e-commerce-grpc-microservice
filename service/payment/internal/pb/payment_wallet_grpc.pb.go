// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: payment_wallet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentWalletService_CreatePaymentWallet_FullMethodName = "/paymentwallet.PaymentWalletService/CreatePaymentWallet"
	PaymentWalletService_ListPaymentWallets_FullMethodName  = "/paymentwallet.PaymentWalletService/ListPaymentWallets"
	PaymentWalletService_GetPaymentWallets_FullMethodName   = "/paymentwallet.PaymentWalletService/GetPaymentWallets"
	PaymentWalletService_UpdatePaymentWallet_FullMethodName = "/paymentwallet.PaymentWalletService/UpdatePaymentWallet"
	PaymentWalletService_DeletePaymentWallet_FullMethodName = "/paymentwallet.PaymentWalletService/DeletePaymentWallet"
)

// PaymentWalletServiceClient is the client API for PaymentWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// =====================
// Service: PaymentWalletService
// =====================
type PaymentWalletServiceClient interface {
	CreatePaymentWallet(ctx context.Context, in *CreatePaymentWalletRequest, opts ...grpc.CallOption) (*PaymentWalletResponse, error)
	ListPaymentWallets(ctx context.Context, in *ListPaymentWalletsRequest, opts ...grpc.CallOption) (*ListPaymentWalletsResponse, error)
	GetPaymentWallets(ctx context.Context, in *GetPaymentWalletRequest, opts ...grpc.CallOption) (*PaymentWalletResponse, error)
	UpdatePaymentWallet(ctx context.Context, in *UpdatePaymentWalletRequest, opts ...grpc.CallOption) (*PaymentWalletResponse, error)
	DeletePaymentWallet(ctx context.Context, in *DeletePaymentWalletRequest, opts ...grpc.CallOption) (*DeletePaymentWalletResponse, error)
}

type paymentWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentWalletServiceClient(cc grpc.ClientConnInterface) PaymentWalletServiceClient {
	return &paymentWalletServiceClient{cc}
}

func (c *paymentWalletServiceClient) CreatePaymentWallet(ctx context.Context, in *CreatePaymentWalletRequest, opts ...grpc.CallOption) (*PaymentWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentWalletResponse)
	err := c.cc.Invoke(ctx, PaymentWalletService_CreatePaymentWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentWalletServiceClient) ListPaymentWallets(ctx context.Context, in *ListPaymentWalletsRequest, opts ...grpc.CallOption) (*ListPaymentWalletsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaymentWalletsResponse)
	err := c.cc.Invoke(ctx, PaymentWalletService_ListPaymentWallets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentWalletServiceClient) GetPaymentWallets(ctx context.Context, in *GetPaymentWalletRequest, opts ...grpc.CallOption) (*PaymentWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentWalletResponse)
	err := c.cc.Invoke(ctx, PaymentWalletService_GetPaymentWallets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentWalletServiceClient) UpdatePaymentWallet(ctx context.Context, in *UpdatePaymentWalletRequest, opts ...grpc.CallOption) (*PaymentWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentWalletResponse)
	err := c.cc.Invoke(ctx, PaymentWalletService_UpdatePaymentWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentWalletServiceClient) DeletePaymentWallet(ctx context.Context, in *DeletePaymentWalletRequest, opts ...grpc.CallOption) (*DeletePaymentWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePaymentWalletResponse)
	err := c.cc.Invoke(ctx, PaymentWalletService_DeletePaymentWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentWalletServiceServer is the server API for PaymentWalletService service.
// All implementations must embed UnimplementedPaymentWalletServiceServer
// for forward compatibility.
//
// =====================
// Service: PaymentWalletService
// =====================
type PaymentWalletServiceServer interface {
	CreatePaymentWallet(context.Context, *CreatePaymentWalletRequest) (*PaymentWalletResponse, error)
	ListPaymentWallets(context.Context, *ListPaymentWalletsRequest) (*ListPaymentWalletsResponse, error)
	GetPaymentWallets(context.Context, *GetPaymentWalletRequest) (*PaymentWalletResponse, error)
	UpdatePaymentWallet(context.Context, *UpdatePaymentWalletRequest) (*PaymentWalletResponse, error)
	DeletePaymentWallet(context.Context, *DeletePaymentWalletRequest) (*DeletePaymentWalletResponse, error)
	mustEmbedUnimplementedPaymentWalletServiceServer()
}

// UnimplementedPaymentWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentWalletServiceServer struct{}

func (UnimplementedPaymentWalletServiceServer) CreatePaymentWallet(context.Context, *CreatePaymentWalletRequest) (*PaymentWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentWallet not implemented")
}
func (UnimplementedPaymentWalletServiceServer) ListPaymentWallets(context.Context, *ListPaymentWalletsRequest) (*ListPaymentWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentWallets not implemented")
}
func (UnimplementedPaymentWalletServiceServer) GetPaymentWallets(context.Context, *GetPaymentWalletRequest) (*PaymentWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentWallets not implemented")
}
func (UnimplementedPaymentWalletServiceServer) UpdatePaymentWallet(context.Context, *UpdatePaymentWalletRequest) (*PaymentWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentWallet not implemented")
}
func (UnimplementedPaymentWalletServiceServer) DeletePaymentWallet(context.Context, *DeletePaymentWalletRequest) (*DeletePaymentWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentWallet not implemented")
}
func (UnimplementedPaymentWalletServiceServer) mustEmbedUnimplementedPaymentWalletServiceServer() {}
func (UnimplementedPaymentWalletServiceServer) testEmbeddedByValue()                              {}

// UnsafePaymentWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentWalletServiceServer will
// result in compilation errors.
type UnsafePaymentWalletServiceServer interface {
	mustEmbedUnimplementedPaymentWalletServiceServer()
}

func RegisterPaymentWalletServiceServer(s grpc.ServiceRegistrar, srv PaymentWalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentWalletService_ServiceDesc, srv)
}

func _PaymentWalletService_CreatePaymentWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentWalletServiceServer).CreatePaymentWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentWalletService_CreatePaymentWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentWalletServiceServer).CreatePaymentWallet(ctx, req.(*CreatePaymentWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentWalletService_ListPaymentWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentWalletServiceServer).ListPaymentWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentWalletService_ListPaymentWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentWalletServiceServer).ListPaymentWallets(ctx, req.(*ListPaymentWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentWalletService_GetPaymentWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentWalletServiceServer).GetPaymentWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentWalletService_GetPaymentWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentWalletServiceServer).GetPaymentWallets(ctx, req.(*GetPaymentWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentWalletService_UpdatePaymentWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentWalletServiceServer).UpdatePaymentWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentWalletService_UpdatePaymentWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentWalletServiceServer).UpdatePaymentWallet(ctx, req.(*UpdatePaymentWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentWalletService_DeletePaymentWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaymentWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentWalletServiceServer).DeletePaymentWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentWalletService_DeletePaymentWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentWalletServiceServer).DeletePaymentWallet(ctx, req.(*DeletePaymentWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentWalletService_ServiceDesc is the grpc.ServiceDesc for PaymentWalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentWalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paymentwallet.PaymentWalletService",
	HandlerType: (*PaymentWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePaymentWallet",
			Handler:    _PaymentWalletService_CreatePaymentWallet_Handler,
		},
		{
			MethodName: "ListPaymentWallets",
			Handler:    _PaymentWalletService_ListPaymentWallets_Handler,
		},
		{
			MethodName: "GetPaymentWallets",
			Handler:    _PaymentWalletService_GetPaymentWallets_Handler,
		},
		{
			MethodName: "UpdatePaymentWallet",
			Handler:    _PaymentWalletService_UpdatePaymentWallet_Handler,
		},
		{
			MethodName: "DeletePaymentWallet",
			Handler:    _PaymentWalletService_DeletePaymentWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment_wallet.proto",
}
